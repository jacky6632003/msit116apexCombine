//------------------------------------------------------------------------------
// <auto-generated>
//     這個程式碼是由範本產生。
//
//     對這個檔案進行手動變更可能導致您的應用程式產生未預期的行為。
//     如果重新產生程式碼，將會覆寫對這個檔案的手動變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace msit116apexLayout.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MSIT116APEXEntities : DbContext
    {
        public MSIT116APEXEntities()
            : base("name=MSIT116APEXEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<Article> Article { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<IsEmployee> IsEmployee { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<Task> Task { get; set; }
        public virtual DbSet<TestWebApi> TestWebApi { get; set; }
        public virtual DbSet<UserTwoFactor> UserTwoFactor { get; set; }
        public virtual DbSet<UserPreference> UserPreference { get; set; }
        public virtual DbSet<UserPreferenceAOrder> UserPreferenceAOrder { get; set; }
        public virtual DbSet<UserNewsUrls> UserNewsUrls { get; set; }
        public virtual DbSet<UserLevel> UserLevel { get; set; }
        public virtual DbSet<uPages> uPages { get; set; }
        public virtual DbSet<uPowers> uPowers { get; set; }
        public virtual DbSet<uRolePowers> uRolePowers { get; set; }
        public virtual DbSet<uRoleUsers> uRoleUsers { get; set; }
        public virtual DbSet<CRM_subordinate> CRM_subordinate { get; set; }
        public virtual DbSet<InterviewRecords> InterviewRecords { get; set; }
        public virtual DbSet<InterviewType> InterviewType { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Events> Events { get; set; }
        public virtual DbSet<Leavecategory> Leavecategory { get; set; }
        public virtual DbSet<Review> Review { get; set; }
        public virtual DbSet<uRolePowerConfirmRole> uRolePowerConfirmRole { get; set; }
        public virtual DbSet<IsAdmin> IsAdmin { get; set; }
        public virtual DbSet<uRoles> uRoles { get; set; }
        public virtual DbSet<uRolePowerConfirm> uRolePowerConfirm { get; set; }
        public virtual DbSet<uRolePowerConfirmHistoryDetail> uRolePowerConfirmHistoryDetail { get; set; }
        public virtual DbSet<uRolePowerConfirmHistory> uRolePowerConfirmHistory { get; set; }
        public virtual DbSet<UserNews> UserNews { get; set; }
        public virtual DbSet<uRolePowerConfirmHistoryConfirmData> uRolePowerConfirmHistoryConfirmData { get; set; }
        public virtual DbSet<uRolePowerConfirmHistoryConfirmDataDetail> uRolePowerConfirmHistoryConfirmDataDetail { get; set; }
        public virtual DbSet<ChargeFee> ChargeFee { get; set; }
        public virtual DbSet<FundArea> FundArea { get; set; }
        public virtual DbSet<FundChargeDate> FundChargeDate { get; set; }
        public virtual DbSet<FundCompany> FundCompany { get; set; }
        public virtual DbSet<FundCurrency> FundCurrency { get; set; }
        public virtual DbSet<FundDetail> FundDetail { get; set; }
        public virtual DbSet<FundGoods> FundGoods { get; set; }
        public virtual DbSet<FundMaster> FundMaster { get; set; }
        public virtual DbSet<FundOrder> FundOrder { get; set; }
        public virtual DbSet<FundOrderDetail> FundOrderDetail { get; set; }
        public virtual DbSet<FundTradeBank> FundTradeBank { get; set; }
        public virtual DbSet<FundTradeCurrency> FundTradeCurrency { get; set; }
        public virtual DbSet<FundTradeType> FundTradeType { get; set; }
        public virtual DbSet<FundType> FundType { get; set; }
        public virtual DbSet<FundUserBankAccount> FundUserBankAccount { get; set; }
        public virtual DbSet<ShoppingCart> ShoppingCart { get; set; }
        public virtual DbSet<FundDeploy> FundDeploy { get; set; }
        public virtual DbSet<Leave> Leave { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<Annualleav> Annualleav { get; set; }
        public virtual DbSet<PendingOrderHistory> PendingOrderHistory { get; set; }
        public virtual DbSet<SelfSelectedStockList> SelfSelectedStockList { get; set; }
        public virtual DbSet<StockCategoriesList> StockCategoriesList { get; set; }
        public virtual DbSet<StockInfo> StockInfo { get; set; }
        public virtual DbSet<StockInfoHistory> StockInfoHistory { get; set; }
        public virtual DbSet<StockTradingRecord> StockTradingRecord { get; set; }
        public virtual DbSet<StockTreasury> StockTreasury { get; set; }
        public virtual DbSet<UserNewsConfirmList> UserNewsConfirmList { get; set; }
        public virtual DbSet<AddressCity> AddressCity { get; set; }
        public virtual DbSet<AddressDistrict> AddressDistrict { get; set; }
        public virtual DbSet<AddressRoad> AddressRoad { get; set; }
        public virtual DbSet<UserMailAddress> UserMailAddress { get; set; }
        public virtual DbSet<UserResidenceAddress> UserResidenceAddress { get; set; }
        public virtual DbSet<ConfirmPhoto> ConfirmPhoto { get; set; }
    
        public virtual ObjectResult<string> SelectCompany(string fundAreaName, ObjectParameter fundCpyName)
        {
            var fundAreaNameParameter = fundAreaName != null ?
                new ObjectParameter("FundAreaName", fundAreaName) :
                new ObjectParameter("FundAreaName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SelectCompany", fundAreaNameParameter, fundCpyName);
        }
    
        public virtual int ShoppingCartAddItems(string cartID, Nullable<int> goodID, Nullable<int> quantity)
        {
            var cartIDParameter = cartID != null ?
                new ObjectParameter("CartID", cartID) :
                new ObjectParameter("CartID", typeof(string));
    
            var goodIDParameter = goodID.HasValue ?
                new ObjectParameter("GoodID", goodID) :
                new ObjectParameter("GoodID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ShoppingCartAddItems", cartIDParameter, goodIDParameter, quantityParameter);
        }
    
        public virtual ObjectResult<ShoppingCartList_Result> ShoppingCartList(string cartID)
        {
            var cartIDParameter = cartID != null ?
                new ObjectParameter("CartID", cartID) :
                new ObjectParameter("CartID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShoppingCartList_Result>("ShoppingCartList", cartIDParameter);
        }
    
        public virtual ObjectResult<SSStockListNumberMarket_Result> SSStockListNumberMarket(Nullable<int> sSS_EmpID, string sSS_ListName)
        {
            var sSS_EmpIDParameter = sSS_EmpID.HasValue ?
                new ObjectParameter("SSS_EmpID", sSS_EmpID) :
                new ObjectParameter("SSS_EmpID", typeof(int));
    
            var sSS_ListNameParameter = sSS_ListName != null ?
                new ObjectParameter("SSS_ListName", sSS_ListName) :
                new ObjectParameter("SSS_ListName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSStockListNumberMarket_Result>("SSStockListNumberMarket", sSS_EmpIDParameter, sSS_ListNameParameter);
        }
    
        public virtual ObjectResult<SSStockMarket_Result> SSStockMarket(Nullable<int> sSS_EmpID, string sSS_ListName)
        {
            var sSS_EmpIDParameter = sSS_EmpID.HasValue ?
                new ObjectParameter("SSS_EmpID", sSS_EmpID) :
                new ObjectParameter("SSS_EmpID", typeof(int));
    
            var sSS_ListNameParameter = sSS_ListName != null ?
                new ObjectParameter("SSS_ListName", sSS_ListName) :
                new ObjectParameter("SSS_ListName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SSStockMarket_Result>("SSStockMarket", sSS_EmpIDParameter, sSS_ListNameParameter);
        }
    
        public virtual ObjectResult<StockbyCategory_Result> StockbyCategory(string categoryName)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StockbyCategory_Result>("StockbyCategory", categoryNameParameter);
        }
    
        public virtual ObjectResult<ProcedureGetEmployees_Result> ProcedureGetEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcedureGetEmployees_Result>("ProcedureGetEmployees");
        }
    
        public virtual ObjectResult<ProcedureGetMembers_Result> ProcedureGetMembers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcedureGetMembers_Result>("ProcedureGetMembers");
        }
    
        public virtual ObjectResult<ProcedureGetUserData_Result> ProcedureGetUserData(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcedureGetUserData_Result>("ProcedureGetUserData", idParameter);
        }
    }
}
